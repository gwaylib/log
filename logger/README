日志协议 v1.5
--------------
为规范及统计我公司各平台日志而制定本协议。

目录
--------------
- 使用用例
- 配置定义
- 日志定义
	- 类别定义
	- 分类定义
	- 日志对象
- 文件存储协议
- 打印显示协议
	- 横向打印
	- 纵向打印
- 网络传输协议
- 服务器交互
	- 提交流程
	- 提交方法
	- 内容查看
	- 数据库表
- 参考资料
- 变更记录

使用用例
=========================================
用例1, 直接使用:
import(
    git.ot24.net/go/engine/log
)
func main(){
    log.Debug("...")
}

用例2, 重定义模块名称:
import(
    l git.ot24.net/go/engine/log
)

var log = l.New("main")

func main(){
    log.Debug("...")
}


配置定义
=========================================
配置使用系统的环境变更来设定。

未配置platform环境变量时，平台名称默认使用系统ip来分组;
未配置adapters环境变量时，平台名称默认使用控制台输出;
未配置level环境变量时, 日志默认为DEBUG(0)级别；
未配置server环境变量时，日志服务器地址以test.orientaltele.com:11300来使用
未定义模块日志名称时，默认使用文件目录来命名日志模块；

#####################
# engine/log配置文件
#####################
[engine/log]
platform: etlog
level: 1
adapters: console,server

[engine/log/adapter]
server:127.0.0.1:11300
#####################


日志定义
=========================================

类别定义
-----------------------------------------
此类别参考了log4j、log4net, log4c
debug
	值 0
	调试信息,相当于print输出。

info
	值 1
	程序运行状态信息。如启动、停止、重连等信息，体现了程序环境的变更状态。

warn 
	值 2
	程序异常信息。本类别不影响程序继续使用，但其结果可能会引出潜在的重大问题。
	例如：请求的数据格式错误；网络连接错误(但重新连接后可自动修复), 连接超时等行为。
	此类异常在一段时间如果出现过多，那么应该分析其中的原因，例如可能存在的问题：
	被攻击、硬件老化、硬件达到了承载上限、对方服务出现异常等问题。
	日志系统将发送一封邮件到相关人员。

error
	值 3
	程序致命的错误信息， 提交服务器。此错误将影响到正常逻辑, 甚至平台因此而恐慌、停止服务的行为.
	例如：数据库不可用、充值不可用、短信不可用、vos不可用等需要及时处理的行为都可定义为此类别。
	日志系统将发送一封邮件、短信(或者其他实时联系方式)至相关人员

fatal
	值 4
	检测到程序非正常结束。日志系统将调用所有实时联系方式联系相关人员处理。

分类定义
------------------------------------------
暂无


日志对象
------------------------------------------
日志对象为以下json格式所对应的json对象
{
	// 发生的时间以各平台时间为准
	// 使用RFC3999Nano时间格式协议
	"date":"2012-01-01T00:00:00.999+08:00",

	// 日志级别
	"level": 0,

	// 日志生成器类别
	"logger":"register",

	// 存储时以序列化字符串形式存储
	"msg": JsonObject
}

文件存储协议
==============================================
因本地涉及到文件存储的问题，本协议应用于统一本地存储格式，
文件名:年-月-日.log
文件内容:
日志对象序列化为一行的字符串,例如：
{"date":"2012-01-01T00:00:01.999+08:00","level":0,"logger":"pay","msg":"string test"}
{"date":"2012-01-01T00:00:01.999+08:00","level":0,"logger":"pay","msg":"string test"}
{"date":"2012-01-01T00:00:01.999+08:00","level":0,"logger":"pay","msg":"string test"}
{"date":"2012-01-01T00:00:00.999+08:00","level":0,"logger":"register","msg":{"key":"not found sms driver","reason":" [[86 17363227806]]","where":"runtime/proc.c,line:234 sms/service.go,line:74"}}
{"date":"2012-01-01T00:00:00.999+08:00","level":0,"logger":"register","msg":{"key":"not found sms driver","reason":" [[86 17363227806]]","where":"runtime/proc.c,line:234 sms/service.go,line:74"}}
{"date":"2012-01-01T00:00:00.999+08:00","level":0,"logger":"register","msg":{"key":"not found sms driver","reason":" [[86 17363227806]]","where":"runtime/proc.c,line:234 sms/service.go,line:74"}}

打印显示协议
============================================
为便于原始日志可直观显示而制定本协议。

横向打印
--------------------------------------------
横向打印即文件协议所存储的格式，一个日志显示占用一行，例如：
{"date":"2012-01-01T00:00:01.999+08:00","level":0,"logger":"pay","msg":"string test"}
{"date":"2012-01-01T00:00:00.999+08:00","level":0,"logger":"register","msg":{"key":"not found sms driver","reason":" [[86 17363227806]]","where":"runtime/proc.c,line:234 sms/service.go,line:74"}}

纵向打印
--------------------------------------------
为便于以多行显示，可采用json的序列为指定格式后打印，例如：
{
  "date": "2012-01-01T00:00:01.999+08:00",
  "level": 0,
  "logger": "pay",
  "msg": "string test"
}
{
  "date": "2012-01-01T00:00:00.999+08:00",
  "level": 0,
  "logger": "register",
  "msg": {
    "key": "not found sms driver",
    "reason": " [[86 17363227806]]",
    "where": "runtime/proc.c,line:234 sms/service.go,line:74"
  }
}

网络传输协议
===========================================
本协议用于本地日志提交。
传输协议分协议头与内容体两部分
整体协议:
{
	"contex":{
		// 日志所在平台
		"platform":"t2mserver",

		// 平台版本号
		"version":"1.0.0",

		// 日志产生地
		"ip":"127.0.0.1"
	},

	// 内容体为一个数组，可存放一至多条日志数据。
	// 此协议设计各平台不存放大量的日志数据，最多只存放无法提交的数据。
	// 因此，如果本地日志文件内容过大时由各平台截断处理。
	"data":[
		{"date":"2012-01-01T00:00:01.999+08:00","level":0,"logger":"pay","msg":"string test"},
		{"date":"2012-01-01T00:00:01.999+08:00","level":0,"logger":"pay","msg":"string test"},
		{"date":"2012-01-01T00:00:01.999+08:00","level":0,"logger":"pay","msg":"string test"},
		{"date":"2012-01-01T00:00:00.999+08:00","level":0,"logger":"register","msg":{"key":"not found sms driver","reason":" [[86 17363227806]]","where":"runtime/proc.c,line:234 sms/service.go,line:74"}},
		{"date":"2012-01-01T00:00:00.999+08:00","level":0,"logger":"register","msg":{"key":"not found sms driver","reason":" [[86 17363227806]]","where":"runtime/proc.c,line:234 sms/service.go,line:74"}}
	]
}



服务器交互
============================================

提交流程
--------------------------------------------
1，首先记录日志到内存队列(或者其他机制，由平台具体实现)；
2，同步提交日志到服务器，提交成功，删除内存队列;
3，如果出错，转存本地日志，并发出一条错误短信;
4, 如果本地转存成功，删除内存队列;
5, 如果本地转存失败，输入至控制台，记录控制台输出的信息，成功后删除内存队列数据。
6, 如果仍出错，修复程序，重启程序。
注：本地转存的日志不再自动提交日志服务器；如果需要，可手工提交相关数据。终端流程可http直接提交

提交方法
--------------------------------------------
- 内网方面
日志服务器使用beanstalkd做为日志缓冲接口
各平台使用对应的beanstalkd客户端发送，详见以下链接文档。
.net
https://github.com/search?q=beanstalkd&repo=&langOverride=&start_value=1&type=Everything&language=C%23
go
https://github.com/search?q=beanstalkd&repo=&langOverride=&start_value=1&type=Everything&language=Go
注：发送时注意对客户端工具使用同步发送机制

- 外网方面
外网提交使用http的方式进行提交，以少量日志为主，例如：手机终端需要分析的日志，需要手工补提交日志等。
http://log.server.com/commit?user=logserver&pwd=[com.newding.log]&log=Base64(zlib(data))
base64Table = "fegRQSTUabZcdVWXYhijKLNOPDEFstABCuvwMxGyzHIJklmnropq2345901786!."

内容查看
--------------------------------------------
统计
http://log.server.com/stats
当前系统开始时间 
平台1：
info: 0
warn: 0
error: 0
fatal: 0

按条件统计
http://log.server.com/stats/condition
时间: 必须 | 平台：可选 | 版本：可选 | 别类：可选
info:0
warn:0
error:0
fatal:0

日志查询(如果内容过多，请缩小时间范围)
http://log.server.com/search
查询条件
提交时间 : 必须 | 起始时间: 必须 | 结束时间 : 必须 | 平台：必须 | 版本：可选 | 别类：可选 | 关键字：可选 | 参数:可选
内容统计:
以别类为分组，显示该条件的日志各个数目(使用内存统计)
内容数据:
显示每一条日志的详细内容

数据库表
---------------------------------------------
每月一张日志表
CREATE TABLE IF NOT EXISTS 
        tb_log_201208
(
    	md5 TEXT PRIMARY KEY,

	-- platform name
	platform TEXT NOT NULL,

	-- platform version
	version TEXT NOT NULL,

	-- platform server at
	ip TEXT,

	-- log date time
	date TEXT NOT NULL,

	-- log level
	level int NOT NULL,

	-- logger name
	logger TEXT NOT NULL, 

	-- log message
	msg TEXT NOT NULL
)

注：索引创建请参考程序实现

参考资料
========================================
关于时间格式的资料
IETF http://www.ietf.org/rfc/rfc3339.txt
http://192.168.1.84:6060/pkg/time/
http://docs.oracle.com/javame/config/cldc/ref-impl/midp2.0/jsr118/index.html

关于beanstalk的资料
http://kr.github.com/beanstalkd/

scribe分布式日志系统的资料
http://blog.csdn.net/kohaku/article/details/6049183

了解Java日志系统框架的设计
http://webservices.ctocio.com.cn/java/57/9424057_2.shtml

变更记录
========================================
2015-06-12 v1.5 周树越
1, 项目结构调整，不再依赖环境变更，以避免多个项目时冲突。调整log使用etc配置,但未配置的时候可以有默认值并可使用

2015-02-24 v1.4 周树越
1，调整配置不再依赖engine/etc包，以便可以独立使用

2013-05-17 v1.3 周树越
1，调整Debug类别也存储至数据库

2012-08-21 v1.2 周树越
1, 修改数据库表使用MD5码作为主健，以利于区分重复提交的日志数据
2, 变更级别定义为数值类型，以利于数据搜索。

2012-08-16 v1.1 周树越
1, 协议变更

2012-08-13 v1.0 周树越
1, 协议初始化

