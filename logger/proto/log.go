// 日志包.
// 日志包对proto进行重封装，以简化日志调用.
// 构建的目标是建议对每个程序进行日志分类;
// 日志的数量在正式过程中应不能太多，太大将可能影响程序性能;
// 在接口调用中，日志器采用了异步缓存的功能以提高日志的执行效率，缓存值由具体适配置器决定，默认为10条缓存。
// 日志在使用结束后应关闭，以确保缓存的数据能够输出，如果缓存的数据不能输出，该错误由适配器进行转存处理。
package proto

type Logger interface {
	// 值 0
	// 调试信息,不提交服务器.
	// 由平台控制,可控制台输出,相当于fmt.Print输出.
	Debug(msg ...interface{})
	Debugf(f string, msg ...interface{})

	// 值 1
	// 程序运行状态信息,提交服务器.
	// 如启动、停止、重连等信息，体现了程序环境的变更状态。
	Info(msg ...interface{})
	Infof(f string, msg ...interface{})

	// 值 2
	// 程序异常信息，提交服务器. 本类别不影响程序继续使用,但其结果可能会引出潜在的重大问题.
	// 例如：请求的数据格式错误；网络连接错误(但重新连接后可自动修复), 连接超时等行为。
	// 此类异常在一段时间如果出现过多，那么应该分析其中的原因，例如可能存在的问题：
	// 被攻击、硬件老化、硬件达到了承载上限、对方服务出现异常等问题。
	// 日志系统将发送一封邮件到相关人员。
	Warn(msg ...interface{})
	Warnf(f string, msg ...interface{})

	// 值 3
	// 程序致命的错误信息， 提交服务器。此错误将影响到正常逻辑, 甚至平台因此而恐慌、停止服务的行为.
	// 例如：数据库不可用、充值不可用、短信不可用、vos不可用等需要及时处理的行为都可定义为此类别。
	// 日志系统将发送一封邮件、短信(或者其他实时联系方式)至相关人员
	Error(msg ...interface{})
	Errorf(f string, msg ...interface{})

	// 值 4
	// 检测到程序非正常结束。
	// 日志系统将调用所有实时联系方式联系相关人员处理。
	Fatal(msg ...interface{})
	Fatalf(f string, msg ...interface{})

	// 关闭日志器
	// 当不再使用日志时，应调用关闭，以使用日志的缓冲得到输出。
	Close()

	// 退出操作，执行关闭日志操作并调用os.Exit
	// 对于可执行程序来说，日志的退出意味着程序的退出。
	//
	// 参数
	//  code -- 退出码值，由os.Exit调用
	//  msg -- 记录的消息，级别是一个Info级别.
	//
	Exit(code int, msg ...interface{})
}
